# -*- coding: utf-8 -*-
"""rectangle_alignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJ4fsnwjIlNOH9VPHrF9mHhAKxihPhyx

**TASK 2**
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

"""Read Image"""

image = cv2.imread("rect.png")
gray_scaled = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray_scaled, 200, 255, cv2.THRESH_BINARY)

contours, heirarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

for i in range(1,len(contours)):
    cv2.drawContours(image, contours[i], -1, (250,100,100), 2)

plt.figure(figsize=[10,7])
plt.imshow(image)

image = cv2.imread("top_left.png")
gray_scaled = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray_scaled, 200, 255, cv2.THRESH_BINARY)

contours, heirarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

for i in range(1,len(contours)):
    cv2.drawContours(image, contours[i], -1, (250,100,100), 2)

plt.figure(figsize=[6,3])
plt.imshow(image)
plt.show()

height, width = image.shape[:2]
center = (width/2, height/2)

rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=15, scale=1)

rotated_image = cv2.warpAffine(src=image, M=rotate_matrix, dsize=(width, height))

from PIL import Image
plt.figure(figsize=[3,3])
plt.imshow(image)

plt.figure(figsize=[3,3])
plt.imshow(rotated_image)
img = Image.fromarray(rotated_image)
img.save('top_left_rotated.jpg')
plt.show()

image = cv2.imread("top_right.png")
gray_scaled = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray_scaled, 200, 255, cv2.THRESH_BINARY)

contours, heirarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

for i in range(1,len(contours)):
    cv2.drawContours(image, contours[i], -1, (250,100,100), 2)

plt.figure(figsize=[6,3])
plt.imshow(image)
plt.show()

plt.figure(figsize=[3,3])
plt.imshow(image)

plt.figure(figsize=[3,3])
plt.imshow(rotated_image)
img = Image.fromarray(rotated_image)
img.save('top_right_rotated.jpg')
plt.show()

image = cv2.imread("/content/buttom_left.png")
gray_scaled = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray_scaled, 200, 255, cv2.THRESH_BINARY)

contours, heirarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

for i in range(1,len(contours)):
    cv2.drawContours(image, contours[i], -1, (250,100,100), 2)

plt.figure(figsize=[6,3])
plt.imshow(image)
plt.show()

plt.figure(figsize=[6,3])
plt.imshow(image)

plt.figure(figsize=[6,3])
plt.imshow(rotated_image)
img = Image.fromarray(rotated_image)
img.save('buttom_left_rotated.jpg')

plt.show()

image = cv2.imread("buttom_right.png")
gray_scaled = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray_scaled, 200, 255, cv2.THRESH_BINARY)

contours, heirarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

for i in range(1,len(contours)):
    cv2.drawContours(image, contours[i], -1, (250,100,100), 2)

plt.figure(figsize=[6,3])
plt.imshow(image)
plt.show()

plt.figure(figsize=[6,3])
plt.imshow(image)

plt.figure(figsize=[6,3])
plt.imshow(rotated_image)
img = Image.fromarray(rotated_image)
img.save('buttom_right_rotated.jpg')

plt.show()

from PIL import Image
#Read the two images
image1 = Image.open('/content/top_left_rotated.jpg')
image1.show()
image2 = Image.open('/content/top_right_rotated.jpg')
image2.show()
image3 = Image.open('/content/buttom_left_rotated.jpg')
image3.show()
image4 = Image.open('/content/buttom_right_rotated.jpg')
image4.show()

from PIL import Image

# get images    
img1 = Image.open('top_left_rotated.jpg')
img2 = Image.open('top_right_rotated.jpg')
img3 = Image.open('buttom_left_rotated.jpg')
img4 = Image.open('buttom_right_rotated.jpg')

# get width and height
w1, h1 = img1.size
w2, h2 = img2.size
w3, h3 = img3.size
w4, h4 = img4.size

# to calculate size of new image 
w = max(w1, w2, w3, w4)
h = max(h1, h2, h3, h4)

# create big empty image with place for images
new_image = Image.new('RGB', (w*2, h*2))

# put images on new_image
new_image.paste(img1, (0, 0))
new_image.paste(img2, (w, 0))
new_image.paste(img3, (0, h))
new_image.paste(img4, (w, h))

# save it
new_image.save('task2_result.png')

import cv2
  
# Import the image
file_name = "task2_result.png"
  
# Read the image
src = cv2.imread(file_name, 1)
  
# Convert image to image gray
tmp = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
  
# Applying thresholding technique
_, alpha = cv2.threshold(tmp, 0, 255, cv2.THRESH_BINARY)
  
# Using cv2.split() to split channels 
# of coloured image
b, g, r = cv2.split(src)
  
# Making list of Red, Green, Blue
# Channels and alpha
rgba = [b, g, r, alpha]
  
# Using cv2.merge() to merge rgba
# into a coloured/multi-channeled image
dst = cv2.merge(rgba, 3)
  
# Writing and saving to a new image
cv2.imwrite("gfg_white.png", dst)

from PIL import Image
img = Image.open("/content/gfg_white.png")
img.show()

